<!DOCTYPE html>
<html lang="en">
<!-- THIS IS A LIQUID TEMPLATE -->
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Variants Tree</title>
  {% render 'static-styles.liquid' %}
</head>
<body>
  <div class="banner">
    <h1>Allograph variants</h1>
    <p>Jump to: 
      {% for scriptAllograph in tree %}
        {% assign script = scriptAllograph[0] %}
        <a class="link-script" href="#{{ script }}">{{ script }}</a>
      {% endfor %}
    </p>
    <p>You are here: <span id="breadcrumb">[breadcrumb]</span></p>
  </div>
  <div class="container">
    <div class="tree" role="tree">
      {% for scriptAllograph in tree %}
        {% assign script = scriptAllograph[0] %}
        {% assign allographs = scriptAllograph[1] %}
        <details id="{{ script }}" open>
          <summary>{{ script }}</summary>
          <ul role="group">
            {% for allographVariants in allographs %}
              {% assign allograph = allographVariants[0] %}
              {% assign variantList = allographVariants[1] %}
              <li role="treeitem">
                <details id="{{ script }}-{{ allograph }}" open>
                  <summary>{{ allograph }}</summary>
                  <ul role="group">
                    {% render 'allo-type-tree-variants.liquid', variantList: variantList, allograph: allograph, script: script %}
                  </ul>
                </details>
              </li>
            {% endfor %}
          </ul>
        </details>
      {% endfor %}
    </div>
  </div>
  {% render 'footer.liquid', tree: tree %}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const container = document.querySelector('.container');
      const breadCrumbElement = document.getElementById('breadcrumb');

      function getFirstVisibleTreeItem() {
        const containerTop = container.getBoundingClientRect().top
        for (const summary of container.querySelectorAll('summary')) {
          if (summary.getBoundingClientRect().top >= containerTop) {
            return summary;
          }
        }
        return null
      }

      function escapeHtml(unsafe) {
        return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
      }

      function updateBreadCrumb() {
        // breadcrumb is the first visible summary element in the tree and its ancestor summary elements
        let breadCrumb = Array()
        let item = getFirstVisibleTreeItem()
        while (item) {
          breadCrumb.unshift(item)
          item = item?.closest('details')?.parentElement?.closest('details')?.querySelector('summary')
        }
        let breadcrumbString = breadCrumb.map(summary => {
          let itemName = summary.textContent
          // remove bracketed content from itemName
          itemName = itemName.replace(/\([^)]+\)/g, '')
          return `<a href="#${summary.closest('details').id}">${escapeHtml(itemName)}</a>`
        }).join(' > ')
        breadCrumbElement.innerHTML = breadcrumbString;
      }

      // add event listening to scrolling the .container div
      container.addEventListener('scroll', function() {
        updateBreadCrumb()
      })

      updateBreadCrumb()
    })
  </script>
</body>
</html>