/*
This script generates a web page from a long array of variants such as this example:

[
  {
    "variant-name": "type1",
    "allograph": "A",
    "component-features": [
      {
        "component": "crossbar",
        "feature": "straight"
      }
    ],
    "script": "latin"
  },
  {
    "allograph": "A",
    "component-features": [
      {
        "component": "crossbar",
        "feature": "ascending"
      },
      {
        "component": "crossbar",
        "feature": "straight"
      }
    ],
    "variant-name": "type1.1",
    "script": "latin"
  },
]

The web page generated by this script should:
* show a tree of scripts > allographs > variant > sub-variant (where type3.4 would be a sub-variant of type3). Note that not all variants have sub-variants
* show the characteristic component-features for each variant 
* be rendered with a single Nunjucks template. All HTML tags should be in the template. The variables in the context.
* not rely on any third-party libraries or frameworks
* use as little javascript as possible
* be web accessible
* have a fully expanded tree on page load
* allow the user to collapse any node

For instance type1.1 would appear under latin > A > type1 > type1.1

Note that the variant name is relative to the allograph and script.
So we can have A type1 and B type 1.

*/

const variants = [
  {
    "variant-name": "type1",
    "allograph": "A",
    "component-features": [
      {
        "component": "crossbar",
        "feature": "straight"
      }
    ],
    "script": "latin"
  },
  {
    "allograph": "A",
    "component-features": [
      {
        "component": "crossbar",
        "feature": "ascending"
      },
      {
        "component": "crossbar",
        "feature": "straight"
      }
    ],
    "variant-name": "type1.1",
    "script": "latin"
  },
];

function buildTree(variants) {
  const tree = {};

  variants.forEach((variant) => {
    if (!tree[variant.script]) {
      tree[variant.script] = {};
    }

    if (!tree[variant.script][variant.allograph]) {
      tree[variant.script][variant.allograph] = [];
    }

    let parentVariants = tree[variant.script][variant.allograph];
    const variantParts = variant["variant-name"].split('.');
    let currentVariant;

    for (let i = 0; i < variantParts.length; i++) {
      const part = variantParts[i];

      if (!currentVariant) {
        currentVariant = parentVariants.find(v => v["variant-name"] === part);
      } else {
        if (!currentVariant.children) {
          currentVariant.children = [];
        }
        currentVariant = currentVariant.children.find(v => v["variant-name"] === part);
      }

      if (!currentVariant) {
        const newVariant = { ...variant, "variant-name": part };
        if (i === variantParts.length - 1) {
          Object.assign(newVariant, variant);
          delete newVariant.script;
          delete newVariant.allograph;
        }
        if (parentVariants.includes(currentVariant)) {
          parentVariants[parentVariants.indexOf(currentVariant)] = newVariant;
        } else {
          parentVariants.push(newVariant);
        }
        currentVariant = newVariant;
      }

      parentVariants = currentVariant.children || [];
    }
  });

  return tree;
}

const template = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Variants Tree</title>
  <style>
    .tree ul {
      list-style-type: none;
      padding-left: 20px;
    }
    .tree li {
      margin: 5px 0;
      cursor: pointer;
    }
    .tree input[type="checkbox"] {
      display: none;
    }
    .tree label {
      position: relative;
      padding-left: 15px;
      user-select: none;
    }
    .tree input[type="checkbox"]:checked + ul {
      display: block;
    }
    .tree input[type="checkbox"] + ul {
      display: none;
    }
    .tree label::before {
      content: "+";
      position: absolute;
      left: 0;
    }
    .tree input[type="checkbox"]:checked + ul > li > label::before {
      content: "-";
    }
    .features {
      margin-left: 20px;
    }
  </style>
</head>
<body>
  <div class="tree" role="tree">
    {% for script, allographs in tree %}
      <input type="checkbox" id="{{ script }}" checked aria-expanded="true" />
      <label for="{{ script }}">{{ script }}</label>
      <ul role="group">
        {% for allograph, variantList in allographs %}
          <li role="treeitem">
            <input type="checkbox" id="{{ script }}-{{ allograph }}" checked aria-expanded="true" />
            <label for="{{ script }}-{{ allograph }}">{{ allograph }}</label>
            <ul role="group">
              {% macro renderVariants(variants) %}
                {% for variant in variants %}
                  <li role="treeitem">
                    <input type="checkbox" id="{{ script }}-{{ allograph }}-{{ variant['variant-name'] }}" checked aria-expanded="true" />
                    <label for="{{ script }}-{{ allograph }}-{{ variant['variant-name'] }}">{{ variant['variant-name'] }}</label>
                    {% if variant.children %}
                      <ul role="group">{{ renderVariants(variant.children) | safe }}</ul>
                    {% endif %}
                    <div class="features">
                      <strong>Component Features:</strong><br />
                      {% for feature in variant['component-features'] %}
                        {{ feature.component }} - {{ feature.feature }}<br />
                      {% endfor %}
                    </div>
                  </li>
                {% endfor %}
              {% endmacro %}
              {{ renderVariants(variantList) | safe }}
            </ul>
          </li>
        {% endfor %}
      </ul>
    {% endfor %}
  </div>
</body>
</html>
`;

const tree = buildTree(variants);

const nunjucks = require('nunjucks');

const env = new nunjucks.Environment();
env.addFilter('safe', function(str) {
  return str;
});

const renderedHtml = env.renderString(template, { tree });

console.log(renderedHtml);
