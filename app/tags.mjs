const STATS_PATH = 'app/stats.json'
const SESSION_KEY = 'AvailableTags.tags'

import { AnyFileSystem } from "./any-file-system.mjs";


export class AvailableTags {
  /*
  Keep a dynamic list of unique tags available for marking annotations.

  load() a list of annotation tags from:
  . a index file (generated by regular indexing script)
  . window.localStorage if run from within a browser

  addTag(tag) to the list

  saveToSession(): to save the list in the browser session
  */

  constructor() {
    this.tags = []
  }

  addTag(tag) {
    tag = (tag || '').trim()
    if (!tag || this.tags.includes(tag)) return;
    this.tags.push(tag)
    this.saveToSession()
    return tag
  }

  getTagFormatError(tag, appliedTags=null) {
    let ret = '';
    tag = (tag || '').trim()
    if (tag) {
      if (!tag.match(/^[a-z0-9.-]+$/)) {
        ret = 'Please only use digits, lowercase alphabet, - and .'
      } else {
        if (!tag.match(/[a-z0-9]$/)) {
          ret = 'Please end with a digit or letter.'
        }
        if (!ret && !tag.match(/^[a-z0-9]/)) {
          ret = 'Please start with a digit or letter.'
        }
        if (!ret && tag.match(/[^a-z0-9]{2}/)) {
          ret = 'Please surround each . or - with letters or digits.'
        }
        if (!ret && (appliedTags || []).includes(tag)) {
          ret = 'This tag is already applied.'
        }
      }
    }
    return ret
  }

  async load() {
    // union b/w tyags from session & file
    this.tags = [...new Set(this._loadFromSession().concat(await this._loadFromFile()))]; 
    this.tags = this.tags.sort()
  }

  async _loadFromFile() {
    let afs = new AnyFileSystem()
    let res = await afs.readJson(STATS_PATH)
    return res.ok ? Object.keys(res.data.t) : []
  }

  _loadFromSession() {
    return JSON.parse(window.localStorage.getItem(SESSION_KEY) || '[]')
  }

  saveToSession() {
    window.localStorage.setItem(SESSION_KEY, JSON.stringify(this.tags))
  }

}
